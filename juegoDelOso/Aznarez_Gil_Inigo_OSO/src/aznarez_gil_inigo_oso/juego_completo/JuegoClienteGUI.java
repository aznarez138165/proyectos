/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package aznarez_gil_inigo_oso.juego_completo;

import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.WindowEvent;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.net.SocketException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Iñigo Aznárez
 */
public class JuegoClienteGUI extends javax.swing.JFrame {

    private JButton [][] matriz_botones;
    private String nickname,servidor,puerto;
    private int filas, columnas;
    private Thread recibirThread;
    private Socket socket;
    private DataInputStream in;
    private DataOutputStream out;
    private boolean miTurno = false, ganador = false, empate = false;
    
    
    /**
     * Creates new form JuegoClienteGUI
     */
    public JuegoClienteGUI() {
        initComponents();
        setLocationRelativeTo(null); // Centrar el JFrame en la pantalla
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaChat = new javax.swing.JTextArea();
        editTextChat = new javax.swing.JTextField();
        buttonEnviarMensaje = new javax.swing.JButton();
        panelTablero = new javax.swing.JPanel();
        etiquetaOsosPropios = new javax.swing.JLabel();
        etiquetaOsosRivales = new javax.swing.JLabel();
        etiquetaContadorOsosPropios = new javax.swing.JLabel();
        etiquetaContadorOsosRivales = new javax.swing.JLabel();
        etiquetaTurno = new javax.swing.JLabel();
        etiquetaEsperando = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuConectar = new javax.swing.JMenuItem();
        menuConfiguracion = new javax.swing.JMenuItem();
        menuAbandonar = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textAreaChat.setEditable(false);
        textAreaChat.setColumns(20);
        textAreaChat.setRows(5);
        textAreaChat.setFocusable(false);
        jScrollPane2.setViewportView(textAreaChat);

        buttonEnviarMensaje.setText("-->");
        buttonEnviarMensaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEnviarMensajeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelTableroLayout = new javax.swing.GroupLayout(panelTablero);
        panelTablero.setLayout(panelTableroLayout);
        panelTableroLayout.setHorizontalGroup(
            panelTableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 348, Short.MAX_VALUE)
        );
        panelTableroLayout.setVerticalGroup(
            panelTableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        etiquetaOsosPropios.setForeground(new java.awt.Color(51, 51, 255));
        etiquetaOsosPropios.setText("Osos Propios:");

        etiquetaOsosRivales.setForeground(new java.awt.Color(255, 0, 51));
        etiquetaOsosRivales.setText("Osos Rivales:");

        etiquetaContadorOsosPropios.setText("0");

        etiquetaContadorOsosRivales.setText("0");

        jMenu1.setText("Partida");
        jMenu1.setFocusPainted(true);

        menuConectar.setText("Conectar");
        menuConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuConectarActionPerformed(evt);
            }
        });
        jMenu1.add(menuConectar);

        menuConfiguracion.setText("Configuracion");
        menuConfiguracion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuConfiguracionActionPerformed(evt);
            }
        });
        jMenu1.add(menuConfiguracion);

        menuAbandonar.setText("Abandonar");
        menuAbandonar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAbandonarActionPerformed(evt);
            }
        });
        jMenu1.add(menuAbandonar);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(etiquetaEsperando, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelTablero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(etiquetaTurno, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(etiquetaOsosPropios)
                                    .addComponent(etiquetaOsosRivales))
                                .addGap(45, 45, 45)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(etiquetaContadorOsosRivales)
                                    .addComponent(etiquetaContadorOsosPropios))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(editTextChat, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buttonEnviarMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(etiquetaEsperando, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                    .addComponent(panelTablero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editTextChat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonEnviarMensaje)
                            .addComponent(etiquetaOsosPropios)
                            .addComponent(etiquetaContadorOsosPropios))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(etiquetaOsosRivales)
                            .addComponent(etiquetaContadorOsosRivales)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(etiquetaTurno, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonEnviarMensajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEnviarMensajeActionPerformed
        // TODO add your handling code here:
        try {
            if(socket != null){
                String mensaje = editTextChat.getText();
                editTextChat.setText("");
                out.writeUTF("/CHAT " + mensaje);
                out.flush();
            }
        } catch (IOException e) {
        }
    }//GEN-LAST:event_buttonEnviarMensajeActionPerformed

    private void menuConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuConectarActionPerformed
        // TODO add your handling code here:
        if(nickname == null || servidor == null || puerto == null){
            mostrarAvisoConfiguracion();
            return;
        }
        conectarCliente(); 
        iniciarTablero();
    }//GEN-LAST:event_menuConectarActionPerformed

    private void menuAbandonarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAbandonarActionPerformed
        // TODO add your handling code here:
         try{
            out.writeUTF("/EXIT");
            out.flush();
            socket.close();
            panelTablero.removeAll();
            panelTablero.setVisible(false);
        }catch(IOException e){
        }
    }//GEN-LAST:event_menuAbandonarActionPerformed

    private void menuConfiguracionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuConfiguracionActionPerformed
        // TODO add your handling code here:
        Configuracion configuracion = new Configuracion(this,true);   
        configuracion.setVisible(true);
        nickname = configuracion.getNickname();
        servidor = configuracion.getServidor();
        puerto = configuracion.getPuerto();
    }//GEN-LAST:event_menuConfiguracionActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JuegoClienteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JuegoClienteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JuegoClienteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JuegoClienteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JuegoClienteGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonEnviarMensaje;
    private javax.swing.JTextField editTextChat;
    private javax.swing.JLabel etiquetaContadorOsosPropios;
    private javax.swing.JLabel etiquetaContadorOsosRivales;
    private javax.swing.JLabel etiquetaEsperando;
    private javax.swing.JLabel etiquetaOsosPropios;
    private javax.swing.JLabel etiquetaOsosRivales;
    private javax.swing.JLabel etiquetaTurno;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem menuAbandonar;
    private javax.swing.JMenuItem menuConectar;
    private javax.swing.JMenuItem menuConfiguracion;
    private javax.swing.JPanel panelTablero;
    private javax.swing.JTextArea textAreaChat;
    // End of variables declaration//GEN-END:variables

   
    private void iniciarTablero() {
        etiquetaTurno.setText("Turno del rival");
        panelTablero.removeAll();
        matriz_botones = new JButton[filas][columnas]; // Inicializa la matriz de botones
        panelTablero.setLayout(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        c.fill = GridBagConstraints.HORIZONTAL;
        
        for(int x=0; x < filas; x++) {
            for (int y = 0; y < columnas; y++) {
                final int i = x;
                final int j = y;
                c.gridx = y; 
                c.gridy = x;
                JButton botonAux = new JButton(" ");
                botonAux.setPreferredSize(new java.awt.Dimension(60, 60));
                botonAux.setFont(new Font("Arial", Font.PLAIN, 20));
                botonAux.addActionListener((ActionEvent ae) -> {
                    Object[] opciones = {"S", "O", "Cancelar"};
                    if(!miTurno){
                        mostrarAvisoTurno();
                    }
                    else{
                        int seleccion = JOptionPane.showOptionDialog(null, "Selecciona la letra", "Selección de letra",
                                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opciones, opciones[0]);
                        if(seleccion == 0) {
                                botonAux.setText("S");
                                botonAux.setEnabled(false);
                                enviarJugada(i,j,"S");
                        }else if (seleccion == 1) {
                                botonAux.setEnabled(false);
                                botonAux.setText("O");
                                enviarJugada(i,j,"O");                           
                        }
                    }
                });
                matriz_botones[x][y] =  botonAux;
                panelTablero.add(botonAux,c);
                panelTablero.revalidate();
            }
        }
        this.pack();
    }

    private void conectarCliente() {
       try{
            socket = new Socket(servidor,Integer.parseInt(puerto));   
            in = new DataInputStream(socket.getInputStream());
            out = new DataOutputStream(socket.getOutputStream());
            
            out.writeUTF(nickname); // Enviar nombre de usuario al servidor
            out.flush();
            
            String entrada = in.readUTF(); // Recibo del servidor el numero de filas y columnas del tablero
            String partes[] = entrada.split(" ");
            filas = Integer.parseInt(partes[0]);
            columnas = Integer.parseInt(partes[1]);

            recibirThread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    while (true) {
                        String mensajeRecibido = in.readUTF();
                        procesarMensaje(mensajeRecibido);
                    }
                } catch (IOException e) {
                    System.out.println("Desconectado del servidor");
                }
            }
        });

        // Iniciar el hilo
        recibirThread.start();
        }catch(SocketException se){
            System.out.println("Error al conectar con servidor: " + se.getMessage());
        } catch (IOException e) {
        }            
    }  
    
    private void mostrarAvisoFin() {
        JDialog avisoFin = new JDialog();
        JPanel panel = new JPanel();
        JLabel etiqueta = new JLabel();
        if(ganador) etiqueta.setText("Fin de la partida. Enhorabuena, has ganado!");
        else if(!ganador && !empate) etiqueta.setText("Fin de la partida. Bien jugado, suerte la próxima vez!");
        else if(empate) etiqueta.setText("Fin de la partida. Empate, bien jugado!");
        JButton botonSalir = new JButton("Salir");
        botonSalir.addActionListener((e) -> {
            avisoFin.setVisible(false);
            panelTablero.removeAll();
            panelTablero.setVisible(false);
            etiquetaEsperando.setText("Esperando rival");
            etiquetaContadorOsosPropios.setText("0");
            etiquetaContadorOsosRivales.setText("0");
            try {
                out.writeUTF("/EXIT");
            } catch (IOException ex) {
                Logger.getLogger(JuegoClienteGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        panel.add(etiqueta);
        panel.add(botonSalir);
        avisoFin.add(panel);
        avisoFin.pack();
        avisoFin.setLocationRelativeTo(null);
        avisoFin.setVisible(true);
    }
    
    private void mostrarAvisoTurno() {
        JDialog avisoTurno = new JDialog();
        JPanel panel = new JPanel();
        JLabel etiqueta = new JLabel("No es tu turno");
        JButton botonSalir = new JButton("Cerrar");
        botonSalir.addActionListener((e) -> {
            avisoTurno.dispose();
        });
        panel.add(etiqueta);
        panel.add(botonSalir);
        avisoTurno.add(panel);
        avisoTurno.pack();
        avisoTurno.setLocationRelativeTo(null);
        avisoTurno.setVisible(true);
    }
    
    private void enviarJugada(int i, int j, String c){
        try{
            out.writeUTF("/JUGADA " + i + " "+ j + " " + c);
        }catch(IOException e){
        }
    }

    private void procesarMensaje(String mensajeRecibido) {
        String partes[] = mensajeRecibido.split(" ");
        if(mensajeRecibido.startsWith("/TURNO")){ // /TURNO
            etiquetaTurno.setText("Tu turno");
            miTurno = true;
        }  
        
        else if(mensajeRecibido.startsWith("/JUGADA")){  // /JUGADA i j c
            int i = Integer.parseInt(partes[1]);
            int j = Integer.parseInt(partes[2]);
            String c = partes[3];
            JButton bAux = matriz_botones[i][j];
            bAux.setEnabled(false);
            bAux.setText(c);
        }
        
        else if(mensajeRecibido.startsWith("/CHAT")){ // /CHAT mensaje
            mensajeRecibido = mensajeRecibido.replaceFirst("/CHAT", "").trim();
            textAreaChat.append(mensajeRecibido + "\n");
        }
        
        else if(mensajeRecibido.startsWith("/FIN")){ // /FIN GANADOR o /FIN PERDEDOR o /FIN EMPATE
            String resultado = partes[1];
            if(resultado.equals("GANADOR")){
                ganador = true;
            }else if(resultado.equals("PERDEDOR")){
                ganador = false;
            }else if(resultado.equals("EMPATE")){
                empate = true;
            }
            mostrarAvisoFin();
        }
        
        else if(mensajeRecibido.startsWith("/PUNTOS")){ // /PUNTOS puntosYO puntosRival
            etiquetaContadorOsosPropios.setText(partes[1]);
            etiquetaContadorOsosRivales.setText(partes[2]);
        }
        
        else if(mensajeRecibido.startsWith("/FALLO")){ // /FALLO
            miTurno = false;
            etiquetaTurno.setText("Turno del rival");
        }
        
        else if(mensajeRecibido.startsWith("/ESPERA")){
            etiquetaEsperando.setText("Esperando rival");
        }
        
        else if(mensajeRecibido.startsWith("/COMIENZO")){ // /COMIENZA nicknameRival
            etiquetaEsperando.setText("Partida vs " + partes[1]);
        }

    }

    private void mostrarAvisoConfiguracion() {
        JDialog avisoConfiguracion = new JDialog();
        JPanel panel = new JPanel();
        JLabel etiqueta = new JLabel("Tienes que establecer la configuración primero");
        JButton botonSalir = new JButton("Cerrar");
        botonSalir.addActionListener((e) -> {
            avisoConfiguracion.dispose();
        });
        panel.add(etiqueta);
        panel.add(botonSalir);
        avisoConfiguracion.add(panel);
        avisoConfiguracion.pack();
        avisoConfiguracion.setLocationRelativeTo(null);
        avisoConfiguracion.setVisible(true);
    }
}
